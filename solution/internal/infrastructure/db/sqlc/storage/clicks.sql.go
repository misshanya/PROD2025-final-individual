// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clicks.sql

package storage

import (
	"context"

	"github.com/google/uuid"
)

const createClick = `-- name: CreateClick :one
INSERT INTO clicks (
    campaign_id, client_id
) VALUES (
    $1::uuid, $2::uuid
)
RETURNING id, campaign_id, client_id
`

type CreateClickParams struct {
	CampaignID uuid.UUID
	ClientID   uuid.UUID
}

func (q *Queries) CreateClick(ctx context.Context, arg CreateClickParams) (Click, error) {
	row := q.db.QueryRow(ctx, createClick, arg.CampaignID, arg.ClientID)
	var i Click
	err := row.Scan(&i.ID, &i.CampaignID, &i.ClientID)
	return i, err
}

const isClicked = `-- name: IsClicked :one
SELECT 1 FROM clicks
WHERE
    campaign_id = $1::uuid AND
    client_id = $2::uuid
`

type IsClickedParams struct {
	CampaignID uuid.UUID
	ClientID   uuid.UUID
}

func (q *Queries) IsClicked(ctx context.Context, arg IsClickedParams) (int32, error) {
	row := q.db.QueryRow(ctx, isClicked, arg.CampaignID, arg.ClientID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
