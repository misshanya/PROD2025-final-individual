// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package storage

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, login, age, location, gender
) VALUES (
    $1::uuid, $2::varchar,
    $3::integer, $4::varchar, $5::varchar
)
RETURNING id, login, age, location, gender
`

type CreateUserParams struct {
	ID       uuid.UUID
	Login    string
	Age      int32
	Location string
	Gender   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Login,
		arg.Age,
		arg.Location,
		arg.Gender,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Age,
		&i.Location,
		&i.Gender,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, login, age, location, gender FROM users
WHERE id = $1::uuid
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Age,
		&i.Location,
		&i.Gender,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
login = $1::varchar,
age = $2::int,
location = $3::varchar,
gender = $4::varchar
WHERE id = $5::uuid
`

type UpdateUserParams struct {
	Login    string
	Age      int32
	Location string
	Gender   string
	ID       uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Login,
		arg.Age,
		arg.Location,
		arg.Gender,
		arg.ID,
	)
	return err
}
